[componentInstances:cComponentManager]
instance[dataMemory].type = cDataMemory

;;; default source
[componentInstances:cComponentManager]
instance[dataMemory].type = cDataMemory

;;; source
\{\cm[source{?}:include external source]}

;;; main section
[componentInstances:cComponentManager]
instance[framer].type = cFramer
instance[windower].type = cWindower
instance[transformFFT].type = cTransformFFT
instance[fFTmagphase].type = cFFTmagphase
instance[spectral].type = cSpectral
instance[energy].type = cEnergy
instance[zcr].type = cMZcr
instance[funcconcat].type = cVectorConcat
printLevelStats = 0
nThreads = 1

 
[framer:cFramer]
reader.dmLevel = wave
writer.dmLevel = frames
\{\cm[bufferModeRbConf{?}:path to included config to set the buffer mode for the standard ringbuffer levels]}
// nameAppend = 
copyInputName = 1
frameMode = fixed
// frameListFile = 
// frameList = 
frameSize = 0.064000
frameStep = 0.010000
frameCenterSpecial = left
noPostEOIprocessing = 1
 
[windower:cWindower]
reader.dmLevel = frames
writer.dmLevel = winframes
// nameAppend = 
copyInputName = 1
processArrayFields = 1
gain = 1
offset = 0
winFunc = Gau
sigma = 0.400000
 
[transformFFT:cTransformFFT]
reader.dmLevel = winframes
writer.dmLevel = fftc
// nameAppend = 
copyInputName = 1
processArrayFields = 1
inverse = 0
 
[fFTmagphase:cFFTmagphase]
reader.dmLevel = fftc
writer.dmLevel = fftmag
// nameAppend = 
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[spectral:cSpectral]
reader.dmLevel = fftmag
writer.dmLevel = spectral_output
specDiff = 0
specPosDiff = 0
flux = 1
centroid = 1
rollOff = 0.9

[energy:cEnergy]
reader.dmLevel = frames
writer.dmLevel = energy_output
copyInputName = 1
processArrayFields = 0
htkcompatible = 0
rms = 0
log = 1

[zcr:cMZcr]
reader.dmLevel = frames
writer.dmLevel = zcr_output
mcr = 0
amax = 0
maxmin = 0

[funcconcat:cVectorConcat]
reader.dmLevel = spectral_output;energy_output;zcr_output
writer.dmLevel = features
includeSingleElementFields = 1

;;; sink
\{\cm[sink{?}:include external sink]}